2. Git 써보기
git init : 현재 디렉토리를 Git이 관리하는 프로젝트 디렉토리(=working directory)로 설정하고 그 안에 레포지토리(.git 디렉토리) 생성
git config user.name 'codeit' : 현재 사용자의 아이디를 'codeit'으로 설정(커밋할 때 필요한 정보)
git config user.email 'teacher@codeit.kr' : 현재 사용자의 이메일 주소를 'teacher@codeit.kr'로 설정(커밋할 때 필요한 정보)
git add [파일 이름] : 수정사항이 있는 특정 파일을 staging area에 올리기
git add [디렉토리명] : 해당 디렉토리 내에서 수정사항이 있는 모든 파일들을 staging area에 올리기 
git add . : working directory 내의 수정사항이 있는 모든 파일들을 staging area에 올리기
git reset [파일 이름] : staging area에 올렸던 파일 다시 내리기
git status : Git이 현재 인식하고 있는 프로젝트 관련 내용들 출력(문제 상황이 발생했을 때 현재 상태를 파악하기 위해 활용하면 좋음) 
git commit -m "커밋 메시지" : 현재 staging area에 있는 것들 커밋으로 남기기
git help [커맨드 이름] : 사용법이 궁금한 Git 커맨드의 공식 메뉴얼 내용 출력
3. GitHub 시작하기
git push -u(또는 --set-upstream) origin master : 로컬 레포지토리의 내용을 처음으로 리모트 레포지토리에 올릴 때 사용합니다.
git push : 위의 커맨드를 한번 실행하고 난 후에는 git push라고만 쳐도 로컬 레포지토리의 내용을 리모트 레포지토리에 올릴 수 있습니다.
git pull : 바로 위의 위에 있는 커맨드를 한번 실행하고 난 후에는 git pull이라고만 쳐도 리모트 레포지토리의 내용을 로컬 레포지토리로 가져옵니다.
git clone [프로젝트의 GitHub 상 주소] : GitHub에 있는 프로젝트를 내 컴퓨터로 가져오기
4. Git에서 커밋 다루기
git log : 커밋 히스토리를 출력
git log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 출력해줍니다. 
--pretty 옵션에 대해 더 자세히 알고싶으면 이 링크를 참고하세요. 

git show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인
git commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦
git config alias.[별명] [커맨드] : 길이가 긴 커맨드에 별명을 붙여서 이후로는 별명으로도 해당 커맨드를 실행할 수 있게 설정
git diff [커밋 A의 아이디] [커밋 B의 아이디] : 두 커밋 간의 차이 비교
git reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐(옵션을 생략하면 --mixed 옵션이 적용됨) 
		(1) HEAD가 특정 커밋을 가리키도록 이동시킴(--soft는 여기까지 수행)

		(2) staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)

		(3) working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)

		그리고 이때 커밋 아이디 대신 HEAD의 위치를 기준으로 한 표기법(예 : HEAD^, HEAD~3)을 사용해도 됨

git tag [태그 이름] [커밋 아이디] : 특정 커밋에 태그를 붙임
5. Git에서 브랜치 사용하기
git branch [새 브랜치 이름] : 새로운 브랜치를 생성
git checkout -b [새 브랜치 이름] : 새로운 브랜치를 생성하고 그 브랜치로 바로 이동
git branch -d [기존 브랜치 이름] : 브랜치 삭제
git checkout [기존 브랜치 이름] : 그 브랜치로 이동
git merge [기존 브랜치 이름] : 현재 브랜치에 다른 브랜치를 머지
git merge --abort : 머지를 하다가 conflict가 발생했을 때, 일단은 머지 작업을 취소하고 이전 상태로 돌아감
6. Git 실전 I
git fetch : 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)
git blame : 특정 파일의 내용 한줄한줄이 어떤 커밋에 의해 생긴 것인지 출력 
git revert : 특정 커밋에서 이루어진 작업을 되돌리는(취소하는) 커밋을 새로 생성
7. Git 실전 Ⅱ
git reflog : HEAD가 그동안 가리켜왔던 커밋들의 기록을 출력
git log --all --graph : 모든 브랜치의 커밋 히스토리를, 커밋 간의 관계가 잘 드러나도록 그래프 형식으로 출력
git rebase [브랜치 이름] : A, B 브랜치가 있는 상태에서 지금 HEAD가 A 브랜치를 가리킬 때, git rebase B를 실행하면 A, B 브랜치가 분기하는 시작점이 된 공통 커밋 이후로부터 존재하는 A 브랜치 상의 커밋들이 그대로 B 브랜치의 최신 커밋 이후로 이어붙여짐(git merge와 같은 효과를 가지지만 커밋 히스토리가 한 줄로 깔끔하게 된다는 차이점이 있음)
git stash : 현재 작업 내용을 스택 영역에 저장
git stash apply [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 working directory에 적용
git stash drop [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 스택에서 삭제
git stash pop [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 working directory에 적용하면서 스택에서 삭제
git cherry-pick [커밋 아이디] : 특정 커밋의 내용을 현재 커밋에 반영
! 그 밖에 알아야할 사실 

(1) git commit이라고만 쓰고 실행하면 커밋 메시지를 입력할 수 있는 텍스트 에디터 창이 뜹니다. 거기서 커밋 메시지를 입력하고 저장하고 나면 커밋이 이루어집니다.

(2) git push와 git pull은 그 작업 단위가 브랜치입니다. 예를 들어, master 브랜치에서 git push를 하면 master 브랜치의 내용만 리모트 레포지토리의 master 브랜치로 전송되지, premium 브랜치의 내용이 전송되는 것은 아닙니다.(git push에 --all이라는 옵션을 주면 모든 브랜치의 내용을 전송할 수 있기는 합니다.)

자, Git 토픽에서 배운 커맨드들을 쭉 정리해봤는데요. 기억이 다 잘 나시나요? 이 커맨드들만 제대로 이해하고 사용해도 여러분이 어디에서 어떤 일을 하든 Git을 사용할 때 불편함이 없을 겁니다. 혹시라도 Git으로 아주 세밀한 작업 또는 여기서 배우지 않은 새로운 커맨드를 써야한다고 할지라도 겁낼 필요가 없습니다. 이 토픽에서는 커맨드 뿐만 아니라 Git의 내부 동작 원리도 제대로 배웠기 때문에 여러분이 조금만 노력하면 그런 것들도 금방 쉽게 할 수 있을 겁니다. 




Git은 내부적으로 크게 3가지 종류의 작업 영역을 두고 동작합니다.

각 작업 영역의 이름은

1)working directory
2)staging area
3)repository
입니다. 순서대로 하나씩 설명해드릴게요.

첫 번째 작업 영역인 working directory는 작업을 하는 프로젝트 디렉토리를 말합니다. 
그러니까 지금 상황에서는 MathTool 디렉토리가 working directory입니다.

두 번째 작업 영역인 staging area는 git add를 한 파일들이 존재하는 영역입니다. 
커밋을 하게되면 staging area에 있는 파일들만 커밋에 반영됩니다.

세 번째 작업 영역인 repository는 working directory의 변경 이력들이 저장되어 있는 영역입니다. 
그러니까 커밋들이 저장되는 영역이라는 뜻인데요. 조금 풀어서 설명해볼게요.

working directory에서 뭔가 작업을 하고,
작업한 파일들을 git add 해주고,
커밋을 하면 staging area에 있던 파일들의 모습이 마치 영화의 한 장면, 스냅샷(snapshot)처럼 이 repository에 저장되는 겁니다.




이전 노트에서 Git의 3가지 작업 영역을 배웠습니다. 

작업 영역과 관련해서 한 가지 더 알아두면 좋은 내용이 있는데요.

그건 바로 Git으로 관리되는 파일은 일종의 '상태(status)'라는 걸 가진다는 사실입니다. 
일단 Git에서 파일들은 크게 다음 2가지 상태를 가집니다.

Untracked 상태
Tracked 상태 
그리고 Tracked 상태는 다시 아래와 같은 3가지 상태로 나눌 수 있구요. 

Staged 상태
Unmodified 상태
Modified 상태
각 상태를 순서대로 설명해드릴게요.

1. Untracked 상태

Untracked는 '추적되지 않고 있는'이라는 뜻입니다. 
이 상태는 파일이 Git에 의해서 그 변동사항이 전혀 추적되고 있지 않는 상태를 뜻합니다. 
예를 들어, 파일을 새로 생성하고 그 파일을 한 번도 git add 해주지 않았다면 이 상태입니다.

2. Tracked 상태

파일이 Git에 의해 그 변동사항이 추적되고 있는 상태입니다. 
이 상태는 다시 그 특성에 따라 3가지 상태로 나뉩니다. 하나씩 설명할게요.

(1) Staged 상태

파일의 내용이 수정되고나서, staging area에 올라와있는 상태를 Staged(스테이징된, stage area에 올려진) 상태라고 합니다.
새로 생성한 파일에 내용을 쓰고 git add를 해주거나
한 번이라도 커밋에 포함됐었던 파일이라도 내용을 수정하고 git add를 해주면 이 상태입니다.

(2) Unmodified 상태
현재 파일의 내용이 최신 커밋의 모습과 비교했을 때 전혀 바뀐 게 없는 상태면 그 파일은 Unmodified(수정되지 않은, 변한 게 없는) 상태입니다. 
커밋을 하고 난 직후에는 working directory 안의 모든 파일들이 이 상태가 됩니다.

(3) Modified 상태
최신 커밋의 모습과 비교했을 때 조금이라도 바뀐 내용이 있는 상태면 그 파일은 Modified(수정된) 상태입니다.

이렇게 Git에서 파일은 매 순간 4가지 상태 중 하나의 상태에 있게 됩니다. 이 내용을 그림으로 정리하면 아래와 같습니다.

어떤 경우에, 어떻게 상태 전환이 발생하는지 주의깊게 살펴보세요. 각 경우를 설명하자면 아래 내용과 같습니다.

Add the file : Untracked 상태의 파일을 처음으로 git add 해주면 Staged 상태가 됩니다.
Edit the file : 최신 커밋과 비교했을 때 차이가 없는 Unmodified 상태의 파일의 내용을 수정하면 Modified 상태가 됩니다.
Stage the file : Modified 상태의 파일을 git add 해주면 Staged 상태가 됩니다. 
Remove the file : 파일을 삭제하면 당연히 Git에서 더이상 인식하지 않겠죠?
Commit : 커밋을 하면 staging area에 있던 파일들이 커밋에 반영되고, 이제 모든 파일들은 최신 커밋과 차이가 없게 되니까 Unmodified 상태가 됩니다. 


git init : 현재 디렉토리를 Git이 관리하는 프로젝트 디렉토리(=working directory)로 설정하고 그 안에 레포지토리(.git 디렉토리) 생성
git config user.name 'codeit' : 현재 사용자의 아이디를 'codeit'으로 설정(커밋할 때 필요한 정보)
git config user.email 'teacher@codeit.kr' : 현재 사용자의 이메일 주소를 'teacher@codeit.kr'로 설정(커밋할 때 필요한 정보)
git add [파일 이름] : 수정사항이 있는 특정 파일을 staging area에 올리기
git add [디렉토리명] : 해당 디렉토리 내에서 수정사항이 있는 모든 파일들을 staging area에 올리기 
git add . : working directory 내의 수정사항이 있는 모든 파일들을 staging area에 올리기
git reset [파일 이름] : staging area에 올렸던 파일 다시 내리기
git status : Git이 현재 인식하고 있는 프로젝트 관련 내용들 출력(문제 상황이 발생했을 때 현재 상태를 파악하기 위해 활용하면 좋음) 
git commit -m "커밋 메시지" : 현재 staging area에 있는 것들 커밋으로 남기기
git help [커맨드 이름] : 사용법이 궁금한 Git 커맨드의 공식 메뉴얼 내용 출력

이번 챕터에서 배운 커맨드들을 정리해볼게요.

git push -u origin master : 로컬 레포지토리의 내용을 처음으로 리모트 레포지토리에 올릴 때 사용합니다.(-u origin master가 무슨 뜻인지는 'Git에서 브랜치 사용하기' 챕터에서 배울 거니까 걱정마세요!)
git push : 로컬 레포지토리의 내용을 리모트 레포지토리에 보내기 
git pull : 리모트 레포지토리의 내용을 로컬 레포지토리로 가져오기
git clone [프로젝트의 GitHub 상 주소] : GitHub에 있는 프로젝트를 내 컴퓨터로 가져오기


이때까지 영상에서 계속 커밋 히스토리를 보기위해

> git log  
커맨드를 사용해왔습니다.

그리고 커밋 하나당 한 줄씩 보기 위해

--pretty=oneline
이라는 옵션을 붙여서 사용하고 있죠.

그런데 옵션이 좀 길죠? 이렇게 긴 옵션을 매번 붙여서 사용하는 건 좀 힘들 것 같은데요. 
Git에는 이렇게 길이가 긴 경우의 커맨드 전체에 별명을 붙여서 그 별명을 사용할 수 있도록 해주는 기능이 있습니다.
이 때 붙이는 별명을 alias라고 하고, 별명을 붙이는 행위를 aliasing이라고 합니다.

그럼 한번 aliasing을 해보겠습니다.

git log --pretty=oneline을
git history라는 별명으로
aliasing해보겠습니다. 어떻게 하면 될까요?

aliasing을 할 때도 이렇게

git config
커맨드를 사용하면 되는데요. 바로 보여드릴게요. 이렇게 적으면 됩니다.

git config alias.history 'log --pretty=oneline'
이렇게 쓰고 실행하고 나면 앞으로 git histroy라고만 써도 자동으로 git log --pretty=oneline을 실행하게 됩니다.

다음 영상부터는 git log --pretty=oneline 대신 git history를 사용하도록 하겠습니다. history는 원래 git에 있는 커맨드가 아니라 단지 제가 만든 alias라는 걸 기억하세요. 
그리고 앞으로 여러분도 여러 커맨드와 옵션들을 배울 때 길이가 너무 길어서 짧게 나타내고 싶은 것이 생기면 방금 배운 aliasing을 활용해보세요.

<<<<<<< HEAD
1. git reset을 쓸 때 --hard는 뭐였을까?
이전 영상에서 git reset을 했더니 

HEAD가 과거의 커밋을 가리키게 되었고
working directory의 내부도 그 과거 커밋의 모습처럼 바뀌었습니다. 
그런데 여기서 중요한 사실이 하나 있습니다. 그건 바로 제가 git reset 뒤에 --hard라는 옵션을 썼다는 사실입니다. 

사실 git reset과 함께 쓸 수 있는 옵션에는 --hard 말고도 --soft, --mixed라는 옵션들도 있습니다. 

그리고 이 3가지 옵션들의 정확한 차이점을 다음 영상부터 자세히 배워볼 겁니다. 

여기서 한 가지만 짚고 넘어가자면 이전 영상에서 봤던 결과인

HEAD가 과거의 커밋을 가리키게 되는 결과는 git reset에서 어느 옵션을 쓰든 항상 똑같습니다. 
하지만 working directory의 내부도 그 과거 커밋의 모습처럼 바뀌는 건 --hard 옵션을 썼기 때문에 그런 겁니다.--soft, --mixed 옵션을 쓰면 그렇지 않은데요. 다음 영상에서 자세히 알아볼게요.
2. staging area에 있던 것들은 커밋하고 나면 어떻게 될까?
우리는 프로젝트 디렉토리 안의 파일을 수정하고 git add를 해서 staging area에 올린 다음 커밋을 합니다. 그런데 커밋을 하고 나면 staging area에 있던 파일들은 어떻게 될까요? 사라지는 걸까요? 

그건 아닙니다. 그냥 그 상태 그대로 남아있습니다. 그러니까 커밋을 했다고 staging area가 초기화되거나 하지는 않는 겁니다.

계속 git add를 할 때마다 staging area에서는 새로운 파일이 추가되거나 원래 있던 파일이 더 새로운 버전의 것으로 교체되거나 할 뿐입니다. 

원래 있던 게 사라지는 게 아니라요.

(이 말이 어떤 의미인지는 사실 Git의 내부 작동 원리를 잘 알아야 정확히 이해할 수 있습니다. 일단은 이렇게 이해하고 넘어가세요.) 

이 사실을 확실히 기억하고 넘어가야 다음에 배울 git reset의 옵션에 관한 내용들을 잘 이해할 수 있습니다.

staging area에 있던 것들은 커밋을 하더라도 그것과 상관없이 계속 남아있다는 점, 잘 기억하세요!


git reset을 할 때는 보통 아래와 같은 형식으로 쓰는데요.

git reset [옵션] [커밋 아이디]
그런데 이렇게 커밋 아이디를 쓰려면 매번 커밋 아이디를 찾아야한다는 불편함이 조금 있습니다. 사실 [커밋 아이디] 자리에 다른 걸 써줘도 되는데요.
예를 들어 이런 커밋 히스토리가 있다고 합시다. 



지금 가장 오래된 첫 번째 커밋부터 최신 커밋인 여섯 번째 커밋까지 번호를 붙인 상태입니다.(1 -> 2 -> 3 -> 4 -> 5 -> 6)
지금처럼 HEAD가 6번 커밋를 가리키는 상태에서, 만약 5번 커밋으로 --hard 옵션과 함께 git reset하고 싶다면 이렇게 써야겠죠?

git reset --hard 7f3d
하지만 이렇게 쓰지 않고 이렇게 써도 됩니다.

git reset --hard HEAD^
HEAD^는 현재 HEAD가 가리키고 있는 커밋의 바로 이전 커밋을 나타냅니다. 즉, 이 상황에서는 5번 커밋을 나타내죠.
실제로 실행해보면 아래와 같이 HEAD가 이제 5번 커밋을 가리키는 것을 알 수 있습니다.



만약 '바로 이전'보다 좀더 이전에 있는 커밋을 나타내고 싶다면 아래와 같이 쓰면 됩니다.
git reset --hard HEAD~2
여기서 HEAD~2는 현재 HEAD가 가리키는 커밋보다 2단계 전에 있는 커밋을 나타냅니다. 지금 HEAD가 5번 커밋을 가리키고 있죠? 이 상태에서 위 커맨드를 실행해보면 



HEAD가 이제 3번 커밋을 가리킵니다.
방금 본 표기처럼 HEAD~x는 현재 HEAD가 가리키는 커밋보다 x단계 전에 있는 커밋을 말합니다. 
앞으로 git reset을 할 때 커밋 아이디를 써주기 귀찮다면,
HEAD가 현재 가리키는 커밋을 기준으로 한 상대적인 표현법인

HEAD^
HEAD~2
=======
>>>>>>> 50670f65731a573f0fb85db00d0ccfd7fbba28d7


우리는 커밋을 할 때 해당 커밋에 관한 정보를 커밋 메시지로 남기는데요. 
그런데 커밋 중에서는 다른 것들보다 좀더 중요한 의미가 있는 커밋들도 있습니다. 
이런 중요한 커밋에는 커밋 메시지뿐만 아니라 태그(tag)라는 것을 추가적으로 달기도 합니다.

보통 프로젝트에서 주요 버전의 시작점이 되는 커밋에 이렇게 태그를 다는데요. 
잠깐 아래 그림을 봅시다. 
아래 그림에서 첫 번째 커밋에는 Version 1이라는 태그를 달고, 
여섯 번째 커밋에는 Version 2라는 태그를 달고 싶다고 해봅시다.



아래와 같은 형식으로 태그를 달아줄 수 있는데요. 

git tag [태그 이름] [커밋 아이디]
한번 해볼게요.



총 2개의 태그를 달았습니다.

그 다음에 이 프로젝트 디렉토리에 있는 모든 태그를 조회해볼게요.

git tag
라고 쓰면 됩니다. 실행해보면



제가 추가했던 Version1, Version2 태그들이 보이죠?

그 다음 각 태그와 연결된 커밋이 보고 싶으면,

git show [태그 이름]
의 형식으로 실행해주면 됩니다. 저는 Version_1 태그가 가리키는 커밋을 살펴볼게요.



Version_1 태그에 연결된 커밋의 정보가 잘 보이죠? 
이렇게 새 버전의 시작점이 되는 커밋처럼, 
특히 그 의미가 중요한 커밋들은 이렇게 태그를 달아주면 나중에 프로젝트의 이력을 파악할 때 
도움이 됩니다.


이번 챕터에서 배운 커맨드들을 정리해볼게요.

git log : 커밋 히스토리를 출력
git log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 출력해줍니다. --pretty 옵션에 대해 더 자세히 알고싶으면 이 링크를 참고하세요. 
git show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인
git commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦
git config alias.[별명] [커맨드] : 길이가 긴 커맨드에 별명을 붙여서 이후로 별명으로 해당 커맨드를 실행할 수 있도록 설정
git diff [커밋 A의 아이디] [커밋 B의 아이디] : 두 커밋 간의 차이 비교
git reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐(옵션을 생략하면 --mixed 옵션이 적용됨) 
		(1) HEAD가 특정 커밋을 가리키도록 이동시킴(--soft는 여기까지 수행)

		(2) staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)

		(3) working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)

		그리고 이때 커밋 아이디 대신 HEAD의 위치를 기준으로 한 표기법(예 : HEAD^, HEAD~3)을 사용해도 됨

git tag [태그 이름] [커밋 아이디] : 특정 커밋에 태그를 붙임


이전 영상에서는 premium 브랜치에서 master 브랜치를 머지(merge)하다가 Conflict가 발생했고, 저는 그것을 해결하고 머지에 성공했습니다.

하지만 꼭 이렇게 Conflict를 해결하지 않고, 일단 merge 자체를 취소하는 방법도 있습니다. 

이전 영상에서 머지하려다가 아래 그림처럼 Conflict가 났을 때 



calculator.py 파일의 모습은 이랬습니다. 



저는 이전 영상에서 이때 
Conflict가 발생한 빨간 박스 부분을 다 삭제하고
제가 머지의 결과로 원하는 모습대로 코드를 수정한 다음(divide_new 함수 추가) 
커밋을 함으로써 문제를 해결했는데요. 
꼭 이렇게 Conflict를 해결하지 않아도 됩니다.

머지를 시도하기 이전의 상태로 돌아가고 싶다면 그냥 머지 자체를 취소하는 방법도 있는데요. 
머지 작업을 취소하려면
git merge --abort
라고 쓰면 됩니다. --abort는 우리말로 '버리다, 취소하다'라는 뜻입니다.

아래 그림처럼 이 커맨드를 실행하고 



다시 calculator.py 파일을 보면



Conflict 표시가 말끔히 사라지고 premium 브랜치에 있던 calculator.py의 원래 모습 그대로 즉, 머지를 시도하기 이전 모습으로 돌아옵니다.

자, 정리할게요! 
만약 꼭 머지를 해야하는 상황이라면 이전 영상에서 봤던 것처럼 Conflict를 해결하고 
커밋을 하는 게 정석입니다. 

하지만 

Conflict가 발생한 파일들이 너무 많아서 Conflict를 최소화할 수 있는 방식으로 파일들을 
다시 수정하고 커밋한 다음에 머지를 하고 싶다거나
그냥 좀더 나중에 머지하고 싶을 때라면
방금처럼 그냥 머지 자체를 취소해도 됩니다.



이전 영상에서는 파일 하나에서 conflict가 발생하는 상황을 봤습니다. 
하지만 개발 실무에서는 파일 여러 개를 수정하는 경우가 많다보니 머지할 때 
conflict도 파일 여러 개에서 나는 경우가 많습니다. 

이럴 땐 어떻게 해야할까요? 원리는 파일 하나일 때와 같습니다.

일단 아래 그림과 같은 프로젝트가 있다고 해볼게요.



지금 빨간색 박스 안의 커밋(세번째 커밋)에서 
어떤 상품의 정보를 담기 위한 파일 3가지(price, after_service, size)를 만들었습니다. 

지금은 master 브랜치나, premium 브랜치나 그 히스토리가 같죠?

이제 여기서부터 각 브랜치에서 서로 다르게 커밋을 해볼게요. 

master 브랜치와 premium 브랜치에서 3가지 파일을 각각 서로 다르게 수정하고 커밋하겠습니다. 
그 과정은 별도로 보여드리지 않고 생략할게요. 

그 다음 master 브랜치에서 premium 브랜치를 머지하려고 하면 



위 그림처럼 3가지 파일 모두에서 conflict가 발생합니다. 
꼭 이런 출력 결과가 아니더라도 이전에 우리가 배운 git status 커맨드를 사용하면 
현재 conflict가 발생한 파일들의 목록을 언제든지 확인할 수 있습니다. 



 자, 각 파일에서 conflict가 어떻게 났는지 하나씩 살펴볼까요? 

price 파일 



after_service 파일 



size 파일



======= 기호를 기준으로

master 브랜치에서 했던 커밋이 위쪽에,
premium 브랜치에서 했던 커밋이 아래쪽에 
보이는 상태입니다.

일단 price 파일에서만 conflict를 해결해볼게요.



이렇게 conflict를 해결하고, 

git add price 
를 실행하고, 

다시 git status로 확인을 해보면 



price 파일은 conflict를 해결하고 
staging area에 올려주었기 때문에 커밋할 수 있는 파일이라는 걸 확인할 수 있습니다. 
이렇게 conflict가 해결된 상태를 resolved(해결된) 상태라고 말하기도 합니다.

자, 이제 나머지 두 파일(after_service, size)도 모두 conflict를 해결하고 나서, 늘 하던대로 

git add .
를 실행하고 커밋해주면 됩니다.



그럼 머지가 정상적으로 마무리됩니다! 

자, 여러 개의 파일에서 conflict가 발생했을 때도 앞으로 잘 해결할 수 있겠죠? 
파일 여러개가 conflict가 났을 때는

파일 하나씩 conflict를 해결하고 git add [파일 이름] 커맨드로 하나씩 staging area에 올리거나(중간중간에 git status 커맨드로 현재 상태 확인하면서)
모든 파일들의 conflict를 다 해결하고, git add . 커맨드로 한번에 staging area에 올리고
커밋을 하면 됩니다.





이번에는 브랜치(branch)에 대해 좀더 많은 것들을 배워보겠습니다.
저는 그때

GitHub에서 Math_Box라는 리모트 레포지토리(remote repository)를 만들고
로컬 레포지토리(local repository)의 내용을 그 리모트 레포지토리에 보내기위해 아래와 같은 커맨드 2개를 실행한 적이 있습니다. 
git remote add origin https://github.com/kyuri-dev/Math_Box.git
git push -u origin master 
그 때는 이 2개의 커맨드를 그냥 복사-붙여넣기해서 실행만 하고 정확한 의미에 대해서 설명하지 않았는데요. 
이번 노트에서는 그 의미를 알아보겠습니다. 

1. origin이란?
먼저 첫 번째 커맨드를 봅시다. 
git remote add origin https://github.com/kyuri-dev/Math_Box.git
이 커맨드에서 remote는 리모트 레포지토리에 관한 작업을 할 때 쓰는 커맨드입니다. 

그리고 그 뒤의 add는 새로운 리모트 레포지토리를 등록하겠다는 뜻입니다. 
그 다음에는 origin https://github.com/kyuri-dev/Math_Box.git이라고 써있죠?

이 표현은 https://github.com/kyuri-dev/Math_Box.git 리모트 레포지토리를
origin이라는 이름으로 등록하겠다는 뜻입니다.
그러니까 이 커맨드를 실행하고 나면 https://github.com/kyuri-dev/Math_Box.git를 origin으로 간단하게 나타낼 수 있게 되는 거죠.

그럼 왜 하필 origin이라고 하는 걸까요? 
origin이 아닌 여러분이 원하는 다른 단어를 입력해도 큰 상관은 없습니다. 
하지만 Git에서는 리모트 레포지토리를 최초로 추가할 때 origin이라는 이름으로 가리키는 것이 관례화되어 있습니다. 

origin은 ‘근원’, ‘기원’이라는 뜻을 가집니다. 
아마도 다른 사람의 리모트 레포지토리를 자신의 컴퓨터로 가져와서 작업을 하는 사람의 입장에서는 
리모트 레포지토리가 프로젝트의 근원이 되는 존재이기 때문에 그런 관습이 생긴 것으로 추측됩니다. 

사실

 git remote add hello https://github.com/kyuri-dev/Math_Box.git
처럼 origin 대신 우리가 원하는 단어(hello)를 써도 상관은 없지만, 되도록 관례에 따라 origin을 써주는 게 좋겠죠?

2. Remote Repositoy에 있는 브랜치
이제 두 번째 커맨드를 설명해드릴게요. 

git push -u origin master
이 커맨드의 뜻은 

현재 로컬 레포지토리에 있는 master 브랜치의 내용(=master 브랜치와 관계된 모든 커밋들)을
origin이라는 리모트 레포지토리로 보낸다는 뜻입니다.
이때 같은 이름의 브랜치로 전송하게 되는데 만약 origin이라는 리모트 레포지토리에 master 브랜치가 없으면 master 브랜치를 새로 생성하고 푸시합니다. 

그런데 여기서 옵션 -u는 무슨 뜻일까요? -u는 --set-upstream이라는 옵션의 약자입니다. 
이렇게 --set-upstream(-u) 옵션을 주면 

로컬 레포지토리에 있는 master 브랜치가 
origin에 있는 master 브랜치를 tracking(추적)하는 걸로 설정됩니다. 
tracking이라는 건 로컬 레포지토리의 한 브랜치가 리모트 레포지토리의 한 브랜치와 연결되어 
그것을 계속 바라보는 상태가 되는 것이라고 생각하시면 됩니다. 
이렇게 맺어진 연결 상태를 tracking connection이라고 합니다. 

만약 

로컬 레포지토리에 A라는 브랜치가 있고,
리모트 레포지토리에 B라는 브랜치가 있을 때 
이런 tracking connection이 서로 맺어진 경우,
B 브랜치를 A 브랜치의 upstream branch라고 합니다. 
지금은 구별하기 위해서 A와 B라고 표현했지만 보통은 같은 이름인 경우가 대부분입니다.
이렇게 tracking connection이 한번 설정되고 나면,

사용자가 현재 master 브랜치에 위치해있을 때,

git push
라고만 써도 자동으로 리모트 레포지토리의 master 브랜치를 대상으로 git push가 동작하고,

git pull 
라고만 써도 리모트 레포지토리의 master 브랜치를 대상으로 git pull이 동작합니다. 

사실 --set-upstream(-u) 옵션을 주지 않아도 그 후에 git push와 git pull을 할 수 있기는 합니다. 
하지만 맨 처음에 이 옵션을 주지 않으면 tracking connection이 없기 때문에 나중에 git push를 하고 싶을 때

git push origin master:master 
이런 식으로 적어줘야 합니다. 여기서

origin은 리모트 레포지토리를 나타내고,
master:master에서 더 먼저 나오는 master는 로컬 레포지토리의 master 브랜치(~에서)/
더 뒤에 나오는 master는 리모트 레포지토리의 master 브랜치(~으로)를 나타냅니다.
그러니까 tracking connection이 없으면 매번 이런 식으로 git push를 해줘야 합니다. 
git pull도 마찬가지로 이런 식의 복잡한 표현이 필요하게 됩니다.

그러니까 그냥 처음부터 tracking connection을 설정하고 
그 이후부터는 git push, git pull이라고만 써서 편하게 푸시와 풀을 하는 게 좋겠죠? 
이게 바로 제가 맨 처음에 로컬 레포지토리의 내용을 리모트 레포지토리로 보낼 때 -u라는 옵션을 썼던 이유입니다.

3. origin/master의 의미
자, 이제 

로컬 레포지토리의 master 브랜치 
리모트 레포지토리의 master 브랜치 
이렇게 같은 이름이지만, 서로 다른 2개의 브랜치가 있다는 걸 알겠죠? 

그럼 리모트 레포지토리에 있는 master 브랜치는 어떻게 볼 수 있을까요? GitHub 페이지에서 보면 될 겁니다.
하지만 제 컴퓨터에서도 확인할 수 있는 방법이 있습니다. 잠깐 커밋 히스토리를 살펴보면



위 그림에서

master가 로컬 레포지토리의 master 브랜치를 나타내고
origin/master가 리모트 레포지토리의 master 브랜치를 나타냅니다. 
이때까지 로컬 레포지토리의 master 브랜치에서 여러 커밋을 했지만 그러고나서 git push를 해준 적은 없었습니다. 
그래서 위 그림처럼 origin/master가 master보다 이전의 커밋을 가리키고 있는 겁니다.

다음 영상에서는 master, premium 브랜치 둘 다에서 리모트 레포지토리로 git push 하겠습니다. 
그러고 나면 이제 origin/master도 master와 같은 커밋을 가리키게 될 것입니다.


이번 챕터에서 배운 커맨드를 정리해봅시다.

git branch [새 브랜치 이름] : 새로운 브랜치를 생성
git checkout -b [새 브랜치 이름] : 새로운 브랜치를 생성하고 그 브랜치로 바로 이동
git branch -d [기존 브랜치 이름] : 브랜치 삭제
git checkout [기존 브랜치 이름] : 그 브랜치로 이동
git merge [기존 브랜치 이름] : 현재 브랜치에 다른 브랜치를 머지
git merge --abort : 머지를 하다가 conflict가 발생했을 때, 일단은 머지 작업을 취소하고 이전 상태로 돌아감



이번 챕터에서 배운 커맨드들을 정리해볼게요.

git fetch : 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)
git blame : 특정 파일의 내용 한줄한줄이 어떤 커밋에 의해 생긴 것인지 출력 
git revert : 특정 커밋에서 이루어진 작업을 되돌리는(취소하는) 커밋을 새로 생성


1. 작업 내용 저장
git stash 

2. 작업 내용 조회(=스택 살펴보기)
git stash list

3. 작업 내용 적용 
git stash apply [작업 내용의 아이디]
* 작업 내용의 아이디를 생략하면 가장 최근의 작업 내용이 적용됨

4. 작업 내용 제거
git stash drop [작업 내용의 아이디]
* 작업 내용의 아이디를 생략하면 가장 최근의 작업 내용이 제거됨

이전 영상에서 저는 적용(apply)한 작업 내용은 스택에서 제거(drop)해주는 게 좋다고 했었죠? 
그래서 git stash apply를 쓰고 git stash drop을 바로 해줬었는데요. 
그런데 사실 이런 식으로 번거롭게 할 필요없이, 작업 내용을 적용하면서 동시에 스택에서 제거도 해주는 커맨드가 있습니다.
그건 바로

git stash pop [작업 내용의 아이디]
이라는 커맨드입니다. 이 커맨드를 쓰면 특정 작업 내용을 적용함과 동시에 그것을 스택에서 제거합니다. 

참고로, 

git stash pop [작업 내용의 아이디]
git stash pop 커맨드는

[작업 내용의 아이디]를 인자로 주면, 특정 작업 내용을 적용하면서 스택에서 제거합니다.

[작업 내용의 아이디]를 인자로 주지 않으면, 가장 최근에 한 작업 내용을 적용하면서 스택에서 제거합니다. 

자, 이번 노트에서는 git stash pop 커맨드를 배웠는데요.

앞으로 스택에 저장된 작업 내용을 working directory에 적용할 때

그 작업 내용을 나중에 또 쓸 필요가 있다면 git stash apply를
나중에 또 쓸 필요가 없다면 git stash pop을 쓰면 됩니다. 
일반적으로는 후자의 경우가 더 많을 겁니다.

